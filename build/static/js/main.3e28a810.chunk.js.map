{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e28a810.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n    return (\r\n        <Card onClick\r\n        ={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                {/* Title Coronavirus Cses */}\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                {/* Number of coronavirus cases */}\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>{cases}</h2>\r\n\r\n                {/* Total */}\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n         } else {\r\n                return 1;\r\n            }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// Draw circles on the map with react tooptip\r\nexport const showDataOnMap = (data, casesType='cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}     \r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex} \r\n        fillColor={casesTypeColors[casesType].hex} \r\n        radius={ Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier }\r\n        >\r\n        \r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0.0\")}</div>\r\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0.0\")}</div>\r\n                <div className=\"info-deaaths\">Deaths: {numeral(country.deaths).format(\"0.0\")}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='$copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n\r\n                {/* Loop through countries and draw markers to the countries */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n    <div className=\"table\">\r\n        {countries.map(({country, cases })=> (\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td>\r\n                    <strong>{numeral(cases).format()}</strong>\r\n                </td>\r\n            </tr>\r\n        ))}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips : {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n            x: date,\r\n            y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n    // https://disease.sh/v3/...\r\n    // covid-19/historical/all?lastday=120\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            let chartData = buildChartData(data, \"cases\");\r\n            setData(chartData);        \r\n        });\r\n\r\n        };\r\n        fetchData();\r\n        \r\n    }, [casesType]);\r\n    \r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line options ={options} data={{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data,\r\n                        },\r\n                    ],\r\n                }} />\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport './App.css';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // STATE = How to write a variable in react\n  // USEEFFECT = Runs a piece of code based on a a given condition\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    // The code inside here will run once when the componenet loads and not again\n    // async -> send a request, wait for it, do something with it\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {  \n        const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n\n    });\n  };\n\n  console.log(countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n      {/* { Header } */}\n      {/* { Title + Select input dropdown field } */}\n      <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app_dropdown\">\n          <Select variant = \"outlined\" onChange={onCountryChange} value ={country}>\n            {/* Loop through all the countries and show a dropdwon */}\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {\n              countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))\n            }\n         </Select>\n        </FormControl>\n      </div>\n\n      <div className=\"app_stats\">   \n        <InfoBox isRed active={casesType === \"cases\"} onClick={(e) => setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={prettyPrintStat( countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n        <InfoBox active={casesType === \"recovered\"} onClick={(e) => setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n        <InfoBox isRed active={casesType === \"deaths\"} onClick={(e) => setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n      </div>\n\n      {/* { Map } */}\n      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n\n      <Card className=\"app_right\">\n      <CardContent>\n        <h3>Live Cases by Country</h3>\n        <Table countries={tableData} />\n\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n        <LineGraph className=\"app_graph\" casesType={casesType} />\n        {/* { Graph } */}\n      </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}